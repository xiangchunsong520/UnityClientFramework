// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolBuildProjectSettings.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BuildBase {

  /// <summary>Holder for reflection information generated from ProtocolBuildProjectSettings.proto</summary>
  public static partial class ProtocolBuildProjectSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtocolBuildProjectSettings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolBuildProjectSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJQcm90b2NvbEJ1aWxkUHJvamVjdFNldHRpbmdzLnByb3RvEglCdWlsZEJh",
            "c2UijgEKDEJ1aWxkQ2hhbm5lbBIOCgZhY3RpdmUYASABKAgSEwoLY2hhbm5l",
            "bE5hbWUYAiABKAkSEwoLcGx1Z2luc1BhdGgYAyABKAkSEAoIYnVpbGRBbGwY",
            "BCABKAgSEQoJYnVpbGRNaW5pGAUgASgIEhAKCHNlbGVjdElwGAYgASgIEg0K",
            "BWRlYnVnGAcgASgIInMKCkJ1aWxkR3JvdXASDgoGYWN0aXZlGAEgASgIEioK",
            "CHBsYXRmb3JtGAIgASgOMhguQnVpbGRCYXNlLkJ1aWxkUGxhdGZvcm0SKQoI",
            "Y2hhbm5lbHMYAyADKAsyFy5CdWlsZEJhc2UuQnVpbGRDaGFubmVsImkKDUJ1",
            "aWxkU2V0dGluZ3MSFgoOZXhwb3J0UmVzb3VyY2UYASABKAgSFAoMYnVpbGRQ",
            "cm9qZWN0GAIgASgIEioKC2J1aWxkR3JvdXBzGAMgAygLMhUuQnVpbGRCYXNl",
            "LkJ1aWxkR3JvdXAi0QEKDUNoYW5uZWxDb25maWcSEwoLY2hhbm5lbE5hbWUY",
            "ASABKAkSCwoDc2RrGAIgASgJEhAKCHBsYXRmb3JtGAMgASgJEg4KBnNvdXJj",
            "ZRgEIAEoCRIQCghidW5kbGVJRBgFIAEoCRIUCgxkb3dubG9hZE5hbWUYBiAB",
            "KAkSEgoKdmVyc2lvblVybBgHIAEoCRIUCgx1cGRhdGVJbkdhbWUYCCABKAgS",
            "FQoNZ29uZ2dhb0ZvbGRlchgJIAEoCRITCgtwcm9kdWN0TmFtZRgKIAEoCSI8",
            "ChFDaGFubmVsQ29uZmlnTGlzdBInCgVkYXRhcxgBIAMoCzIYLkJ1aWxkQmFz",
            "ZS5DaGFubmVsQ29uZmlnIngKDENsaWVudENvbmZpZxIPCgd2ZXJzaW9uGAEg",
            "ASgJEhIKCnZlcnNpb25UYWcYAiABKAkSCwoDaXBzGAMgASgJEg0KBXBvcnRz",
            "GAQgASgJEhMKC3Jlc291cmNlVXJsGAUgASgJEhIKCnZlcnNpb25VcmwYBiAB",
            "KAkqMgoNQnVpbGRQbGF0Zm9ybRILCgdBbmRyb2lkEAASBwoDSU9TEAESCwoH",
            "V2luZG93cxACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::BuildBase.BuildPlatform), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BuildBase.BuildChannel), global::BuildBase.BuildChannel.Parser, new[]{ "Active", "ChannelName", "PluginsPath", "BuildAll", "BuildMini", "SelectIp", "Debug" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BuildBase.BuildGroup), global::BuildBase.BuildGroup.Parser, new[]{ "Active", "Platform", "Channels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BuildBase.BuildSettings), global::BuildBase.BuildSettings.Parser, new[]{ "ExportResource", "BuildProject", "BuildGroups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BuildBase.ChannelConfig), global::BuildBase.ChannelConfig.Parser, new[]{ "ChannelName", "Sdk", "Platform", "Source", "BundleID", "DownloadName", "VersionUrl", "UpdateInGame", "GonggaoFolder", "ProductName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BuildBase.ChannelConfigList), global::BuildBase.ChannelConfigList.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BuildBase.ClientConfig), global::BuildBase.ClientConfig.Parser, new[]{ "Version", "VersionTag", "Ips", "Ports", "ResourceUrl", "VersionUrl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BuildPlatform {
    [pbr::OriginalName("Android")] Android = 0,
    [pbr::OriginalName("IOS")] Ios = 1,
    [pbr::OriginalName("Windows")] Windows = 2,
  }

  #endregion

  #region Messages
  public sealed partial class BuildChannel : pb::IMessage<BuildChannel> {
    private static readonly pb::MessageParser<BuildChannel> _parser = new pb::MessageParser<BuildChannel>(() => new BuildChannel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildChannel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BuildBase.ProtocolBuildProjectSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildChannel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildChannel(BuildChannel other) : this() {
      active_ = other.active_;
      channelName_ = other.channelName_;
      pluginsPath_ = other.pluginsPath_;
      buildAll_ = other.buildAll_;
      buildMini_ = other.buildMini_;
      selectIp_ = other.selectIp_;
      debug_ = other.debug_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildChannel Clone() {
      return new BuildChannel(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "channelName" field.</summary>
    public const int ChannelNameFieldNumber = 2;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pluginsPath" field.</summary>
    public const int PluginsPathFieldNumber = 3;
    private string pluginsPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PluginsPath {
      get { return pluginsPath_; }
      set {
        pluginsPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buildAll" field.</summary>
    public const int BuildAllFieldNumber = 4;
    private bool buildAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuildAll {
      get { return buildAll_; }
      set {
        buildAll_ = value;
      }
    }

    /// <summary>Field number for the "buildMini" field.</summary>
    public const int BuildMiniFieldNumber = 5;
    private bool buildMini_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuildMini {
      get { return buildMini_; }
      set {
        buildMini_ = value;
      }
    }

    /// <summary>Field number for the "selectIp" field.</summary>
    public const int SelectIpFieldNumber = 6;
    private bool selectIp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelectIp {
      get { return selectIp_; }
      set {
        selectIp_ = value;
      }
    }

    /// <summary>Field number for the "debug" field.</summary>
    public const int DebugFieldNumber = 7;
    private bool debug_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Debug {
      get { return debug_; }
      set {
        debug_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildChannel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildChannel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (ChannelName != other.ChannelName) return false;
      if (PluginsPath != other.PluginsPath) return false;
      if (BuildAll != other.BuildAll) return false;
      if (BuildMini != other.BuildMini) return false;
      if (SelectIp != other.SelectIp) return false;
      if (Debug != other.Debug) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (PluginsPath.Length != 0) hash ^= PluginsPath.GetHashCode();
      if (BuildAll != false) hash ^= BuildAll.GetHashCode();
      if (BuildMini != false) hash ^= BuildMini.GetHashCode();
      if (SelectIp != false) hash ^= SelectIp.GetHashCode();
      if (Debug != false) hash ^= Debug.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChannelName);
      }
      if (PluginsPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PluginsPath);
      }
      if (BuildAll != false) {
        output.WriteRawTag(32);
        output.WriteBool(BuildAll);
      }
      if (BuildMini != false) {
        output.WriteRawTag(40);
        output.WriteBool(BuildMini);
      }
      if (SelectIp != false) {
        output.WriteRawTag(48);
        output.WriteBool(SelectIp);
      }
      if (Debug != false) {
        output.WriteRawTag(56);
        output.WriteBool(Debug);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (PluginsPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PluginsPath);
      }
      if (BuildAll != false) {
        size += 1 + 1;
      }
      if (BuildMini != false) {
        size += 1 + 1;
      }
      if (SelectIp != false) {
        size += 1 + 1;
      }
      if (Debug != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildChannel other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.PluginsPath.Length != 0) {
        PluginsPath = other.PluginsPath;
      }
      if (other.BuildAll != false) {
        BuildAll = other.BuildAll;
      }
      if (other.BuildMini != false) {
        BuildMini = other.BuildMini;
      }
      if (other.SelectIp != false) {
        SelectIp = other.SelectIp;
      }
      if (other.Debug != false) {
        Debug = other.Debug;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            ChannelName = input.ReadString();
            break;
          }
          case 26: {
            PluginsPath = input.ReadString();
            break;
          }
          case 32: {
            BuildAll = input.ReadBool();
            break;
          }
          case 40: {
            BuildMini = input.ReadBool();
            break;
          }
          case 48: {
            SelectIp = input.ReadBool();
            break;
          }
          case 56: {
            Debug = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildGroup : pb::IMessage<BuildGroup> {
    private static readonly pb::MessageParser<BuildGroup> _parser = new pb::MessageParser<BuildGroup>(() => new BuildGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BuildBase.ProtocolBuildProjectSettingsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildGroup(BuildGroup other) : this() {
      active_ = other.active_;
      platform_ = other.platform_;
      channels_ = other.channels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildGroup Clone() {
      return new BuildGroup(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private global::BuildBase.BuildPlatform platform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BuildBase.BuildPlatform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BuildBase.BuildChannel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(26, global::BuildBase.BuildChannel.Parser);
    private readonly pbc::RepeatedField<global::BuildBase.BuildChannel> channels_ = new pbc::RepeatedField<global::BuildBase.BuildChannel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BuildBase.BuildChannel> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (Platform != other.Platform) return false;
      if(!channels_.Equals(other.channels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      hash ^= channels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (Platform != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Platform);
      }
      channels_.WriteTo(output, _repeated_channels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      size += channels_.CalculateSize(_repeated_channels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildGroup other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      channels_.Add(other.channels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 16: {
            platform_ = (global::BuildBase.BuildPlatform) input.ReadEnum();
            break;
          }
          case 26: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildSettings : pb::IMessage<BuildSettings> {
    private static readonly pb::MessageParser<BuildSettings> _parser = new pb::MessageParser<BuildSettings>(() => new BuildSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BuildBase.ProtocolBuildProjectSettingsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSettings(BuildSettings other) : this() {
      exportResource_ = other.exportResource_;
      buildProject_ = other.buildProject_;
      buildGroups_ = other.buildGroups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildSettings Clone() {
      return new BuildSettings(this);
    }

    /// <summary>Field number for the "exportResource" field.</summary>
    public const int ExportResourceFieldNumber = 1;
    private bool exportResource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExportResource {
      get { return exportResource_; }
      set {
        exportResource_ = value;
      }
    }

    /// <summary>Field number for the "buildProject" field.</summary>
    public const int BuildProjectFieldNumber = 2;
    private bool buildProject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuildProject {
      get { return buildProject_; }
      set {
        buildProject_ = value;
      }
    }

    /// <summary>Field number for the "buildGroups" field.</summary>
    public const int BuildGroupsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::BuildBase.BuildGroup> _repeated_buildGroups_codec
        = pb::FieldCodec.ForMessage(26, global::BuildBase.BuildGroup.Parser);
    private readonly pbc::RepeatedField<global::BuildBase.BuildGroup> buildGroups_ = new pbc::RepeatedField<global::BuildBase.BuildGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BuildBase.BuildGroup> BuildGroups {
      get { return buildGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExportResource != other.ExportResource) return false;
      if (BuildProject != other.BuildProject) return false;
      if(!buildGroups_.Equals(other.buildGroups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExportResource != false) hash ^= ExportResource.GetHashCode();
      if (BuildProject != false) hash ^= BuildProject.GetHashCode();
      hash ^= buildGroups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExportResource != false) {
        output.WriteRawTag(8);
        output.WriteBool(ExportResource);
      }
      if (BuildProject != false) {
        output.WriteRawTag(16);
        output.WriteBool(BuildProject);
      }
      buildGroups_.WriteTo(output, _repeated_buildGroups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExportResource != false) {
        size += 1 + 1;
      }
      if (BuildProject != false) {
        size += 1 + 1;
      }
      size += buildGroups_.CalculateSize(_repeated_buildGroups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildSettings other) {
      if (other == null) {
        return;
      }
      if (other.ExportResource != false) {
        ExportResource = other.ExportResource;
      }
      if (other.BuildProject != false) {
        BuildProject = other.BuildProject;
      }
      buildGroups_.Add(other.buildGroups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExportResource = input.ReadBool();
            break;
          }
          case 16: {
            BuildProject = input.ReadBool();
            break;
          }
          case 26: {
            buildGroups_.AddEntriesFrom(input, _repeated_buildGroups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelConfig : pb::IMessage<ChannelConfig> {
    private static readonly pb::MessageParser<ChannelConfig> _parser = new pb::MessageParser<ChannelConfig>(() => new ChannelConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BuildBase.ProtocolBuildProjectSettingsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfig(ChannelConfig other) : this() {
      channelName_ = other.channelName_;
      sdk_ = other.sdk_;
      platform_ = other.platform_;
      source_ = other.source_;
      bundleID_ = other.bundleID_;
      downloadName_ = other.downloadName_;
      versionUrl_ = other.versionUrl_;
      updateInGame_ = other.updateInGame_;
      gonggaoFolder_ = other.gonggaoFolder_;
      productName_ = other.productName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfig Clone() {
      return new ChannelConfig(this);
    }

    /// <summary>Field number for the "channelName" field.</summary>
    public const int ChannelNameFieldNumber = 1;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk" field.</summary>
    public const int SdkFieldNumber = 2;
    private string sdk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sdk {
      get { return sdk_; }
      set {
        sdk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundleID" field.</summary>
    public const int BundleIDFieldNumber = 5;
    private string bundleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleID {
      get { return bundleID_; }
      set {
        bundleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "downloadName" field.</summary>
    public const int DownloadNameFieldNumber = 6;
    private string downloadName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DownloadName {
      get { return downloadName_; }
      set {
        downloadName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionUrl" field.</summary>
    public const int VersionUrlFieldNumber = 7;
    private string versionUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionUrl {
      get { return versionUrl_; }
      set {
        versionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateInGame" field.</summary>
    public const int UpdateInGameFieldNumber = 8;
    private bool updateInGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateInGame {
      get { return updateInGame_; }
      set {
        updateInGame_ = value;
      }
    }

    /// <summary>Field number for the "gonggaoFolder" field.</summary>
    public const int GonggaoFolderFieldNumber = 9;
    private string gonggaoFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GonggaoFolder {
      get { return gonggaoFolder_; }
      set {
        gonggaoFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 10;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelName != other.ChannelName) return false;
      if (Sdk != other.Sdk) return false;
      if (Platform != other.Platform) return false;
      if (Source != other.Source) return false;
      if (BundleID != other.BundleID) return false;
      if (DownloadName != other.DownloadName) return false;
      if (VersionUrl != other.VersionUrl) return false;
      if (UpdateInGame != other.UpdateInGame) return false;
      if (GonggaoFolder != other.GonggaoFolder) return false;
      if (ProductName != other.ProductName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (Sdk.Length != 0) hash ^= Sdk.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BundleID.Length != 0) hash ^= BundleID.GetHashCode();
      if (DownloadName.Length != 0) hash ^= DownloadName.GetHashCode();
      if (VersionUrl.Length != 0) hash ^= VersionUrl.GetHashCode();
      if (UpdateInGame != false) hash ^= UpdateInGame.GetHashCode();
      if (GonggaoFolder.Length != 0) hash ^= GonggaoFolder.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelName);
      }
      if (Sdk.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sdk);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Platform);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (BundleID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BundleID);
      }
      if (DownloadName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DownloadName);
      }
      if (VersionUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VersionUrl);
      }
      if (UpdateInGame != false) {
        output.WriteRawTag(64);
        output.WriteBool(UpdateInGame);
      }
      if (GonggaoFolder.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GonggaoFolder);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ProductName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (Sdk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sdk);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BundleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleID);
      }
      if (DownloadName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DownloadName);
      }
      if (VersionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionUrl);
      }
      if (UpdateInGame != false) {
        size += 1 + 1;
      }
      if (GonggaoFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GonggaoFolder);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelConfig other) {
      if (other == null) {
        return;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.Sdk.Length != 0) {
        Sdk = other.Sdk;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BundleID.Length != 0) {
        BundleID = other.BundleID;
      }
      if (other.DownloadName.Length != 0) {
        DownloadName = other.DownloadName;
      }
      if (other.VersionUrl.Length != 0) {
        VersionUrl = other.VersionUrl;
      }
      if (other.UpdateInGame != false) {
        UpdateInGame = other.UpdateInGame;
      }
      if (other.GonggaoFolder.Length != 0) {
        GonggaoFolder = other.GonggaoFolder;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelName = input.ReadString();
            break;
          }
          case 18: {
            Sdk = input.ReadString();
            break;
          }
          case 26: {
            Platform = input.ReadString();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
          case 42: {
            BundleID = input.ReadString();
            break;
          }
          case 50: {
            DownloadName = input.ReadString();
            break;
          }
          case 58: {
            VersionUrl = input.ReadString();
            break;
          }
          case 64: {
            UpdateInGame = input.ReadBool();
            break;
          }
          case 74: {
            GonggaoFolder = input.ReadString();
            break;
          }
          case 82: {
            ProductName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelConfigList : pb::IMessage<ChannelConfigList> {
    private static readonly pb::MessageParser<ChannelConfigList> _parser = new pb::MessageParser<ChannelConfigList>(() => new ChannelConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BuildBase.ProtocolBuildProjectSettingsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfigList(ChannelConfigList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfigList Clone() {
      return new ChannelConfigList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::BuildBase.ChannelConfig> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::BuildBase.ChannelConfig.Parser);
    private readonly pbc::RepeatedField<global::BuildBase.ChannelConfig> datas_ = new pbc::RepeatedField<global::BuildBase.ChannelConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BuildBase.ChannelConfig> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelConfigList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BuildBase.ProtocolBuildProjectSettingsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      version_ = other.version_;
      versionTag_ = other.versionTag_;
      ips_ = other.ips_;
      ports_ = other.ports_;
      resourceUrl_ = other.resourceUrl_;
      versionUrl_ = other.versionUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionTag" field.</summary>
    public const int VersionTagFieldNumber = 2;
    private string versionTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionTag {
      get { return versionTag_; }
      set {
        versionTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ips" field.</summary>
    public const int IpsFieldNumber = 3;
    private string ips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ips {
      get { return ips_; }
      set {
        ips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 4;
    private string ports_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ports {
      get { return ports_; }
      set {
        ports_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resourceUrl" field.</summary>
    public const int ResourceUrlFieldNumber = 5;
    private string resourceUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUrl {
      get { return resourceUrl_; }
      set {
        resourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionUrl" field.</summary>
    public const int VersionUrlFieldNumber = 6;
    private string versionUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionUrl {
      get { return versionUrl_; }
      set {
        versionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (VersionTag != other.VersionTag) return false;
      if (Ips != other.Ips) return false;
      if (Ports != other.Ports) return false;
      if (ResourceUrl != other.ResourceUrl) return false;
      if (VersionUrl != other.VersionUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (VersionTag.Length != 0) hash ^= VersionTag.GetHashCode();
      if (Ips.Length != 0) hash ^= Ips.GetHashCode();
      if (Ports.Length != 0) hash ^= Ports.GetHashCode();
      if (ResourceUrl.Length != 0) hash ^= ResourceUrl.GetHashCode();
      if (VersionUrl.Length != 0) hash ^= VersionUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (VersionTag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionTag);
      }
      if (Ips.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ips);
      }
      if (Ports.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ports);
      }
      if (ResourceUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ResourceUrl);
      }
      if (VersionUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VersionUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (VersionTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionTag);
      }
      if (Ips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ips);
      }
      if (Ports.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ports);
      }
      if (ResourceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUrl);
      }
      if (VersionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.VersionTag.Length != 0) {
        VersionTag = other.VersionTag;
      }
      if (other.Ips.Length != 0) {
        Ips = other.Ips;
      }
      if (other.Ports.Length != 0) {
        Ports = other.Ports;
      }
      if (other.ResourceUrl.Length != 0) {
        ResourceUrl = other.ResourceUrl;
      }
      if (other.VersionUrl.Length != 0) {
        VersionUrl = other.VersionUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            VersionTag = input.ReadString();
            break;
          }
          case 26: {
            Ips = input.ReadString();
            break;
          }
          case 34: {
            Ports = input.ReadString();
            break;
          }
          case 42: {
            ResourceUrl = input.ReadString();
            break;
          }
          case 50: {
            VersionUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
