// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolDatas.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Data {

  /// <summary>Holder for reflection information generated from ProtocolDatas.proto</summary>
  public static partial class ProtocolDatasReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtocolDatas.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolDatasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b2NvbERhdGFzLnByb3RvEgREYXRhIr0BCg1DaGFubmVsQ29uZmln",
            "EhMKC2NoYW5uZWxOYW1lGAEgASgJEgsKA3NkaxgCIAEoCRIQCghwbGF0Zm9y",
            "bRgDIAEoCRIOCgZzb3VyY2UYBCABKAkSEAoIYnVuZGxlSUQYBSABKAkSFAoM",
            "ZG93bmxvYWROYW1lGAYgASgJEhQKDHVwZGF0ZUluR2FtZRgHIAEoCBIVCg1n",
            "b25nZ2FvRm9sZGVyGAggASgJEhMKC3Byb2R1Y3ROYW1lGAkgASgJIjcKEUNo",
            "YW5uZWxDb25maWdMaXN0EiIKBWRhdGFzGAEgAygLMhMuRGF0YS5DaGFubmVs",
            "Q29uZmlnIkUKDENsaWVudENvbmZpZxIPCgd2ZXJzaW9uGAEgASgJEhIKCnZl",
            "cnNpb25UYWcYAiABKAkSEAoIZ2F0ZXdheXMYAyABKAkiNQoQQ2xpZW50Q29u",
            "ZmlnTGlzdBIhCgVkYXRhcxgBIAMoCzISLkRhdGEuQ2xpZW50Q29uZmlnIiQK",
            "CExhbmd1YWdlEgoKAmlkGAEgASgFEgwKBHRleHQYAiABKAkiLQoMTGFuZ3Vh",
            "Z2VMaXN0Eh0KBWRhdGFzGAEgAygLMg4uRGF0YS5MYW5ndWFnZSKTAQoMV2lu",
            "ZG93Q29uZmlnEg8KB3dpbk5hbWUYASABKAkSEgoKcHJlZmFiTmFtZRgCIAEo",
            "CRISCgpjYW1lcmFOYW1lGAMgASgJEhAKCGlzUmVjb3JkGAQgASgIEg8KB2lz",
            "SG92ZXIYBSABKAgSEwoLY2xvc2VEZWxldGUYBiABKAgSEgoKb3BlbkVmZmVj",
            "dBgHIAEoCCI1ChBXaW5kb3dDb25maWdMaXN0EiEKBWRhdGFzGAEgAygLMhIu",
            "RGF0YS5XaW5kb3dDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.ChannelConfig), global::Data.ChannelConfig.Parser, new[]{ "ChannelName", "Sdk", "Platform", "Source", "BundleID", "DownloadName", "UpdateInGame", "GonggaoFolder", "ProductName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.ChannelConfigList), global::Data.ChannelConfigList.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.ClientConfig), global::Data.ClientConfig.Parser, new[]{ "Version", "VersionTag", "Gateways" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.ClientConfigList), global::Data.ClientConfigList.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.Language), global::Data.Language.Parser, new[]{ "Id", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.LanguageList), global::Data.LanguageList.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.WindowConfig), global::Data.WindowConfig.Parser, new[]{ "WinName", "PrefabName", "CameraName", "IsRecord", "IsHover", "CloseDelete", "OpenEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Data.WindowConfigList), global::Data.WindowConfigList.Parser, new[]{ "Datas" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChannelConfig : pb::IMessage<ChannelConfig> {
    private static readonly pb::MessageParser<ChannelConfig> _parser = new pb::MessageParser<ChannelConfig>(() => new ChannelConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfig(ChannelConfig other) : this() {
      channelName_ = other.channelName_;
      sdk_ = other.sdk_;
      platform_ = other.platform_;
      source_ = other.source_;
      bundleID_ = other.bundleID_;
      downloadName_ = other.downloadName_;
      updateInGame_ = other.updateInGame_;
      gonggaoFolder_ = other.gonggaoFolder_;
      productName_ = other.productName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfig Clone() {
      return new ChannelConfig(this);
    }

    /// <summary>Field number for the "channelName" field.</summary>
    public const int ChannelNameFieldNumber = 1;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk" field.</summary>
    public const int SdkFieldNumber = 2;
    private string sdk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sdk {
      get { return sdk_; }
      set {
        sdk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundleID" field.</summary>
    public const int BundleIDFieldNumber = 5;
    private string bundleID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleID {
      get { return bundleID_; }
      set {
        bundleID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "downloadName" field.</summary>
    public const int DownloadNameFieldNumber = 6;
    private string downloadName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DownloadName {
      get { return downloadName_; }
      set {
        downloadName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateInGame" field.</summary>
    public const int UpdateInGameFieldNumber = 7;
    private bool updateInGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateInGame {
      get { return updateInGame_; }
      set {
        updateInGame_ = value;
      }
    }

    /// <summary>Field number for the "gonggaoFolder" field.</summary>
    public const int GonggaoFolderFieldNumber = 8;
    private string gonggaoFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GonggaoFolder {
      get { return gonggaoFolder_; }
      set {
        gonggaoFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "productName" field.</summary>
    public const int ProductNameFieldNumber = 9;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelName != other.ChannelName) return false;
      if (Sdk != other.Sdk) return false;
      if (Platform != other.Platform) return false;
      if (Source != other.Source) return false;
      if (BundleID != other.BundleID) return false;
      if (DownloadName != other.DownloadName) return false;
      if (UpdateInGame != other.UpdateInGame) return false;
      if (GonggaoFolder != other.GonggaoFolder) return false;
      if (ProductName != other.ProductName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (Sdk.Length != 0) hash ^= Sdk.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BundleID.Length != 0) hash ^= BundleID.GetHashCode();
      if (DownloadName.Length != 0) hash ^= DownloadName.GetHashCode();
      if (UpdateInGame != false) hash ^= UpdateInGame.GetHashCode();
      if (GonggaoFolder.Length != 0) hash ^= GonggaoFolder.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelName);
      }
      if (Sdk.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sdk);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Platform);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (BundleID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BundleID);
      }
      if (DownloadName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DownloadName);
      }
      if (UpdateInGame != false) {
        output.WriteRawTag(56);
        output.WriteBool(UpdateInGame);
      }
      if (GonggaoFolder.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GonggaoFolder);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ProductName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (Sdk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sdk);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BundleID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleID);
      }
      if (DownloadName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DownloadName);
      }
      if (UpdateInGame != false) {
        size += 1 + 1;
      }
      if (GonggaoFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GonggaoFolder);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelConfig other) {
      if (other == null) {
        return;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.Sdk.Length != 0) {
        Sdk = other.Sdk;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BundleID.Length != 0) {
        BundleID = other.BundleID;
      }
      if (other.DownloadName.Length != 0) {
        DownloadName = other.DownloadName;
      }
      if (other.UpdateInGame != false) {
        UpdateInGame = other.UpdateInGame;
      }
      if (other.GonggaoFolder.Length != 0) {
        GonggaoFolder = other.GonggaoFolder;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelName = input.ReadString();
            break;
          }
          case 18: {
            Sdk = input.ReadString();
            break;
          }
          case 26: {
            Platform = input.ReadString();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
          case 42: {
            BundleID = input.ReadString();
            break;
          }
          case 50: {
            DownloadName = input.ReadString();
            break;
          }
          case 56: {
            UpdateInGame = input.ReadBool();
            break;
          }
          case 66: {
            GonggaoFolder = input.ReadString();
            break;
          }
          case 74: {
            ProductName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelConfigList : pb::IMessage<ChannelConfigList> {
    private static readonly pb::MessageParser<ChannelConfigList> _parser = new pb::MessageParser<ChannelConfigList>(() => new ChannelConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfigList(ChannelConfigList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConfigList Clone() {
      return new ChannelConfigList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.ChannelConfig> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.ChannelConfig.Parser);
    private readonly pbc::RepeatedField<global::Data.ChannelConfig> datas_ = new pbc::RepeatedField<global::Data.ChannelConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.ChannelConfig> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelConfigList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      version_ = other.version_;
      versionTag_ = other.versionTag_;
      gateways_ = other.gateways_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionTag" field.</summary>
    public const int VersionTagFieldNumber = 2;
    private string versionTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionTag {
      get { return versionTag_; }
      set {
        versionTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateways" field.</summary>
    public const int GatewaysFieldNumber = 3;
    private string gateways_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gateways {
      get { return gateways_; }
      set {
        gateways_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (VersionTag != other.VersionTag) return false;
      if (Gateways != other.Gateways) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (VersionTag.Length != 0) hash ^= VersionTag.GetHashCode();
      if (Gateways.Length != 0) hash ^= Gateways.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (VersionTag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionTag);
      }
      if (Gateways.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Gateways);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (VersionTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionTag);
      }
      if (Gateways.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gateways);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.VersionTag.Length != 0) {
        VersionTag = other.VersionTag;
      }
      if (other.Gateways.Length != 0) {
        Gateways = other.Gateways;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            VersionTag = input.ReadString();
            break;
          }
          case 26: {
            Gateways = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfigList : pb::IMessage<ClientConfigList> {
    private static readonly pb::MessageParser<ClientConfigList> _parser = new pb::MessageParser<ClientConfigList>(() => new ClientConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfigList(ClientConfigList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfigList Clone() {
      return new ClientConfigList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.ClientConfig> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.ClientConfig.Parser);
    private readonly pbc::RepeatedField<global::Data.ClientConfig> datas_ = new pbc::RepeatedField<global::Data.ClientConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.ClientConfig> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfigList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Language : pb::IMessage<Language> {
    private static readonly pb::MessageParser<Language> _parser = new pb::MessageParser<Language>(() => new Language());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Language> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language(Language other) : this() {
      id_ = other.id_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Language Clone() {
      return new Language(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Language);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Language other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Language other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LanguageList : pb::IMessage<LanguageList> {
    private static readonly pb::MessageParser<LanguageList> _parser = new pb::MessageParser<LanguageList>(() => new LanguageList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LanguageList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageList(LanguageList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LanguageList Clone() {
      return new LanguageList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.Language> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.Language.Parser);
    private readonly pbc::RepeatedField<global::Data.Language> datas_ = new pbc::RepeatedField<global::Data.Language>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.Language> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LanguageList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LanguageList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LanguageList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowConfig : pb::IMessage<WindowConfig> {
    private static readonly pb::MessageParser<WindowConfig> _parser = new pb::MessageParser<WindowConfig>(() => new WindowConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfig(WindowConfig other) : this() {
      winName_ = other.winName_;
      prefabName_ = other.prefabName_;
      cameraName_ = other.cameraName_;
      isRecord_ = other.isRecord_;
      isHover_ = other.isHover_;
      closeDelete_ = other.closeDelete_;
      openEffect_ = other.openEffect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfig Clone() {
      return new WindowConfig(this);
    }

    /// <summary>Field number for the "winName" field.</summary>
    public const int WinNameFieldNumber = 1;
    private string winName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinName {
      get { return winName_; }
      set {
        winName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prefabName" field.</summary>
    public const int PrefabNameFieldNumber = 2;
    private string prefabName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameraName" field.</summary>
    public const int CameraNameFieldNumber = 3;
    private string cameraName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraName {
      get { return cameraName_; }
      set {
        cameraName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isRecord" field.</summary>
    public const int IsRecordFieldNumber = 4;
    private bool isRecord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRecord {
      get { return isRecord_; }
      set {
        isRecord_ = value;
      }
    }

    /// <summary>Field number for the "isHover" field.</summary>
    public const int IsHoverFieldNumber = 5;
    private bool isHover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHover {
      get { return isHover_; }
      set {
        isHover_ = value;
      }
    }

    /// <summary>Field number for the "closeDelete" field.</summary>
    public const int CloseDeleteFieldNumber = 6;
    private bool closeDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CloseDelete {
      get { return closeDelete_; }
      set {
        closeDelete_ = value;
      }
    }

    /// <summary>Field number for the "openEffect" field.</summary>
    public const int OpenEffectFieldNumber = 7;
    private bool openEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenEffect {
      get { return openEffect_; }
      set {
        openEffect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinName != other.WinName) return false;
      if (PrefabName != other.PrefabName) return false;
      if (CameraName != other.CameraName) return false;
      if (IsRecord != other.IsRecord) return false;
      if (IsHover != other.IsHover) return false;
      if (CloseDelete != other.CloseDelete) return false;
      if (OpenEffect != other.OpenEffect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinName.Length != 0) hash ^= WinName.GetHashCode();
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      if (CameraName.Length != 0) hash ^= CameraName.GetHashCode();
      if (IsRecord != false) hash ^= IsRecord.GetHashCode();
      if (IsHover != false) hash ^= IsHover.GetHashCode();
      if (CloseDelete != false) hash ^= CloseDelete.GetHashCode();
      if (OpenEffect != false) hash ^= OpenEffect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WinName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WinName);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PrefabName);
      }
      if (CameraName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CameraName);
      }
      if (IsRecord != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRecord);
      }
      if (IsHover != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsHover);
      }
      if (CloseDelete != false) {
        output.WriteRawTag(48);
        output.WriteBool(CloseDelete);
      }
      if (OpenEffect != false) {
        output.WriteRawTag(56);
        output.WriteBool(OpenEffect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinName);
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      if (CameraName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraName);
      }
      if (IsRecord != false) {
        size += 1 + 1;
      }
      if (IsHover != false) {
        size += 1 + 1;
      }
      if (CloseDelete != false) {
        size += 1 + 1;
      }
      if (OpenEffect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowConfig other) {
      if (other == null) {
        return;
      }
      if (other.WinName.Length != 0) {
        WinName = other.WinName;
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      if (other.CameraName.Length != 0) {
        CameraName = other.CameraName;
      }
      if (other.IsRecord != false) {
        IsRecord = other.IsRecord;
      }
      if (other.IsHover != false) {
        IsHover = other.IsHover;
      }
      if (other.CloseDelete != false) {
        CloseDelete = other.CloseDelete;
      }
      if (other.OpenEffect != false) {
        OpenEffect = other.OpenEffect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WinName = input.ReadString();
            break;
          }
          case 18: {
            PrefabName = input.ReadString();
            break;
          }
          case 26: {
            CameraName = input.ReadString();
            break;
          }
          case 32: {
            IsRecord = input.ReadBool();
            break;
          }
          case 40: {
            IsHover = input.ReadBool();
            break;
          }
          case 48: {
            CloseDelete = input.ReadBool();
            break;
          }
          case 56: {
            OpenEffect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowConfigList : pb::IMessage<WindowConfigList> {
    private static readonly pb::MessageParser<WindowConfigList> _parser = new pb::MessageParser<WindowConfigList>(() => new WindowConfigList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowConfigList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Data.ProtocolDatasReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfigList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfigList(WindowConfigList other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowConfigList Clone() {
      return new WindowConfigList(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Data.WindowConfig> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(10, global::Data.WindowConfig.Parser);
    private readonly pbc::RepeatedField<global::Data.WindowConfig> datas_ = new pbc::RepeatedField<global::Data.WindowConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Data.WindowConfig> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowConfigList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowConfigList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowConfigList other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
